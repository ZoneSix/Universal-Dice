
// Imports from library.
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * @author ZoneSix   areazone6@gmail.com
 * @date April 3, 2015
 * @version 2.0
 */

public class MainPanel extends javax.swing.JPanel {
    
    // Int declarations
    int diceAmount = 1;
    int rollIndex;
    int score;
    int totalScore;
    
    // Creates 3 new 'DefaultListModel's.
    DefaultListModel historyModel = new DefaultListModel();
    DefaultListModel rollIndexModel = new DefaultListModel();
    DefaultListModel scoreModel = new DefaultListModel();
    
    // Dice rendering properties.
    int diceSize = 80;
    int diceDotSize = 17;
    int diceSpacing = diceSize + 10;
    int dicePosX = 10;
    int dicePosY = 60;
    
    // Creates 5 new dice starting with a score of 6 and disabled.
    Dice dice1 = new Dice( 6, false);
    Dice dice2 = new Dice( 6, false);
    Dice dice3 = new Dice( 6, false);
    Dice dice4 = new Dice( 6, false);
    Dice dice5 = new Dice( 6, false);
    
    public MainPanel() {                        // Creates new form 'MainPanel'.
        
        initComponents();                       // Calls the 'initComponents' method
        
        btnReset.setEnabled(false);             // Sets the 'btnReset' to disabled state at start.
        
        spinrDiceAmount.setValue(diceAmount);   // Sets 'spinrDiceAmout' value to 'diceAmount' at start.
        listHistory.setModel(historyModel);     // Sets 'listHistory's model to 'historyModel' at start.
        
    }
    
    /**
     * Creates the updateDiceCount method.
     * It checks for 'diceAmount' and enabled/disables appropriate dice.
     */
    private void updateDiceCount() {
        
        if ( diceAmount == 1 ) {
            dice1.setEnabled(true);
            dice2.setEnabled(false);
            dice3.setEnabled(false);
            dice4.setEnabled(false);
            dice5.setEnabled(false);
        } else if ( diceAmount == 2 ) {
            dice1.setEnabled(true);
            dice2.setEnabled(true);
            dice3.setEnabled(false);
            dice4.setEnabled(false);
            dice5.setEnabled(false);
        } else if ( diceAmount == 3 ) {
            dice1.setEnabled(true);
            dice2.setEnabled(true);
            dice3.setEnabled(true);
            dice4.setEnabled(false);
            dice5.setEnabled(false);
        } else if ( diceAmount == 4 ) {
            dice1.setEnabled(true);
            dice2.setEnabled(true);
            dice3.setEnabled(true);
            dice4.setEnabled(true);
            dice5.setEnabled(false);
        } else {
            dice1.setEnabled(true);
            dice2.setEnabled(true);
            dice3.setEnabled(true);
            dice4.setEnabled(true);
            dice5.setEnabled(true);
        }
        
    }
    
    /**
     * Creates the updateTotalScore method.
     * It recalculates the sum of scoreModel to totalScore
     */
    private void updateTotalScore() {
        
        totalScore = 0;     // Sets 'totalScore' to 0.
        
        for ( int i = 0; i < scoreModel.size(); i++ ) {         // Scans 'scoreModel' and adds all the scores to 'totalScore'
            totalScore += (int) scoreModel.get(i);
        }
        
        lblTotalScore.setText(Integer.toString(totalScore));    // Sets 'lblTotalScore' to display the value of 'totalScore'.
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpFrame = new javax.swing.JFrame();
        helpScroll = new javax.swing.JScrollPane();
        helpPanel = new javax.swing.JPanel();
        lblHelp_Header = new javax.swing.JLabel();
        sepHelp1 = new javax.swing.JSeparator();
        lblHelp1_Title = new javax.swing.JLabel();
        txaHelp1 = new javax.swing.JTextArea();
        lblHelp1_Image = new javax.swing.JLabel();
        sepHelp2 = new javax.swing.JSeparator();
        lblHelp2_Title = new javax.swing.JLabel();
        txaHelp2 = new javax.swing.JTextArea();
        lblHelp2_Image = new javax.swing.JLabel();
        sepHelp3 = new javax.swing.JSeparator();
        lblHelp3_Title = new javax.swing.JLabel();
        txaHelp3 = new javax.swing.JTextArea();
        lblHelp3_Image = new javax.swing.JLabel();
        sepHelp4 = new javax.swing.JSeparator();
        lblHelp4_Title = new javax.swing.JLabel();
        txaHelp4 = new javax.swing.JTextArea();
        lblHelp4_Image = new javax.swing.JLabel();
        txaHelp4_1 = new javax.swing.JTextArea();
        sepHelp5 = new javax.swing.JSeparator();
        lblHelp5_Title = new javax.swing.JLabel();
        txaHelp5 = new javax.swing.JTextArea();
        lblHelp5_Image = new javax.swing.JLabel();
        sepHelp6 = new javax.swing.JSeparator();
        lblHelp6_Title = new javax.swing.JLabel();
        txaHelp6 = new javax.swing.JTextArea();
        lblHelp6_Image = new javax.swing.JLabel();
        sepHelp7 = new javax.swing.JSeparator();
        lblHelp7_Title = new javax.swing.JLabel();
        txaHelp7 = new javax.swing.JTextArea();
        lblHelp7_Image = new javax.swing.JLabel();
        sepHelp8 = new javax.swing.JSeparator();
        lblHelp8_Title = new javax.swing.JLabel();
        txaHelp8 = new javax.swing.JTextArea();
        lblHelp8_Image = new javax.swing.JLabel();
        aboutDialog = new javax.swing.JDialog();
        aboutPanel = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        lblAbout = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        btnRoll = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        spinrDiceAmount = new javax.swing.JSpinner();
        lblScoreText = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        lblTotalScoreText = new javax.swing.JLabel();
        lblTotalScore = new javax.swing.JLabel();
        lblHistory = new javax.swing.JLabel();
        lblHistoryDesc = new javax.swing.JLabel();
        scrollHistory = new javax.swing.JScrollPane();
        listHistory = new javax.swing.JList();
        btnDelete = new javax.swing.JButton();
        sepMainPanel = new javax.swing.JSeparator();
        cboxDice1 = new javax.swing.JCheckBox();
        cboxDice2 = new javax.swing.JCheckBox();
        cboxDice3 = new javax.swing.JCheckBox();
        cboxDice4 = new javax.swing.JCheckBox();
        cboxDice5 = new javax.swing.JCheckBox();

        helpFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        helpFrame.setTitle("Help");
        helpFrame.setMinimumSize(new java.awt.Dimension(423, 0));

        helpScroll.setBorder(null);
        helpScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        helpScroll.setMaximumSize(new java.awt.Dimension(380, 32767));
        helpScroll.setMinimumSize(new java.awt.Dimension(380, 0));
        helpScroll.setPreferredSize(new java.awt.Dimension(380, 400));

        helpPanel.setMaximumSize(new java.awt.Dimension(380, 32767));
        helpPanel.setMinimumSize(new java.awt.Dimension(380, 200));
        helpPanel.setPreferredSize(new java.awt.Dimension(380, 1240));

        lblHelp_Header.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblHelp_Header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp_Header.setText("Help");

        lblHelp1_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp1_Title.setText("Tooltips");

        txaHelp1.setEditable(false);
        txaHelp1.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp1.setColumns(20);
        txaHelp1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp1.setRows(5);
        txaHelp1.setText("This utility contains tooltips on all its\nelements. It's as easy as moving your\nmouse over desired element and let it\nhover over it til a box of text describing\nthe element appears.");
        txaHelp1.setBorder(null);

        lblHelp1_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_Tooltips.jpg"))); // NOI18N
        lblHelp1_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblHelp2_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp2_Title.setText("Rolling");

        txaHelp2.setEditable(false);
        txaHelp2.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp2.setColumns(20);
        txaHelp2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp2.setRows(5);
        txaHelp2.setText("You roll the dice by pressing the Roll\nbutton. It will randomize a new value\nbetween 1 and 6 for each enabled dice,\nbut it will not randomize any dice that\nare being held. ");
        txaHelp2.setBorder(null);

        lblHelp2_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp2_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_Rolling.jpg"))); // NOI18N
        lblHelp2_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp2_Image.setIconTextGap(0);

        lblHelp3_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp3_Title.setText("Resetting");

        txaHelp3.setEditable(false);
        txaHelp3.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp3.setColumns(20);
        txaHelp3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp3.setRows(5);
        txaHelp3.setText("You can reset the utility at anypoint\nwhile in use by pressing the Reset\nbutton. It will reset the utility to it's\ninitial state. Before the reset, you will\nbe asked to confirm the reset.");
        txaHelp3.setBorder(null);

        lblHelp3_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp3_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_Resetting.jpg"))); // NOI18N
        lblHelp3_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp3_Image.setIconTextGap(0);

        lblHelp4_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp4_Title.setText("Adding & Removing Dice");

        txaHelp4.setEditable(false);
        txaHelp4.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp4.setColumns(20);
        txaHelp4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp4.setRows(5);
        txaHelp4.setText("The utility initially starts with 1 dice\nenabled. This utility supports a total of\n5 dice. You can add or remove dice by\nusing the arrows on the spinner element\nthat is shown in the image to the right.");
        txaHelp4.setBorder(null);

        lblHelp4_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp4_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_AddDelDice.jpg"))); // NOI18N
        lblHelp4_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp4_Image.setIconTextGap(0);

        txaHelp4_1.setEditable(false);
        txaHelp4_1.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp4_1.setColumns(20);
        txaHelp4_1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp4_1.setRows(2);
        txaHelp4_1.setText("Any held dice that gets removed will still keep its held state and keep the\nheld score.");
        txaHelp4_1.setBorder(null);

        lblHelp5_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp5_Title.setText("Score");
        lblHelp5_Title.setVerifyInputWhenFocusTarget(false);

        txaHelp5.setEditable(false);
        txaHelp5.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp5.setColumns(20);
        txaHelp5.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp5.setRows(2);
        txaHelp5.setText("The Score displays the sum of all\nenabled dice for the current roll.");
        txaHelp5.setBorder(null);

        lblHelp5_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp5_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_Score.jpg"))); // NOI18N
        lblHelp5_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp5_Image.setIconTextGap(0);

        lblHelp6_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp6_Title.setText("Total Score");
        lblHelp6_Title.setVerifyInputWhenFocusTarget(false);

        txaHelp6.setEditable(false);
        txaHelp6.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp6.setColumns(20);
        txaHelp6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp6.setRows(4);
        txaHelp6.setText("Total Score displays the score sum of all\nrolls. If a roll is deleted from the histroy\nlist. The total score will update and\nremove the amout of the deleted roll");
        txaHelp6.setBorder(null);

        lblHelp6_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp6_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_TotalScore.jpg"))); // NOI18N
        lblHelp6_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp6_Image.setIconTextGap(0);

        lblHelp7_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp7_Title.setText("Holding Dice");
        lblHelp7_Title.setVerifyInputWhenFocusTarget(false);

        txaHelp7.setEditable(false);
        txaHelp7.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp7.setColumns(20);
        txaHelp7.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp7.setRows(6);
        txaHelp7.setText("At anytime you can hold any enabled\ndice. This can be done by checking the\nHold box underneath desired dice. To\nunhold it, simply uncheck the box. While\na dice is being held. It will not randomize,\nbut the score of it will still be counted\ntowards the total score.");
        txaHelp7.setBorder(null);

        lblHelp7_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp7_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_HoldDice.jpg"))); // NOI18N
        lblHelp7_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp7_Image.setIconTextGap(0);

        lblHelp8_Title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHelp8_Title.setText("History List");
        lblHelp8_Title.setVerifyInputWhenFocusTarget(false);

        txaHelp8.setEditable(false);
        txaHelp8.setBackground(new java.awt.Color(240, 240, 240));
        txaHelp8.setColumns(20);
        txaHelp8.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txaHelp8.setRows(11);
        txaHelp8.setText("The History lists all of your rolls, how\nmany dice we're used and what score\nyou got that roll. If you wish to remove\ne.g., a false roll. It's done by selecting\nthe desired roll from the list and pressing\nDelete Selected button. It will ask you\nfor confirmation before deleting the roll\nfrom the list. By deleting a roll from the\nhistory list, total score will be updated\nand will recalculate the score sum of all\nrolls, excluding deleted rolls.");
        txaHelp8.setBorder(null);

        lblHelp8_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHelp8_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_HistoryList.jpg"))); // NOI18N
        lblHelp8_Image.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHelp8_Image.setIconTextGap(0);

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sepHelp1)
            .addComponent(sepHelp2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(sepHelp3)
            .addComponent(sepHelp4)
            .addComponent(sepHelp5)
            .addComponent(sepHelp6)
            .addComponent(sepHelp7)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblHelp_Header, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHelp1_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, helpPanelLayout.createSequentialGroup()
                        .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(helpPanelLayout.createSequentialGroup()
                                .addComponent(txaHelp1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblHelp1_Image))
                            .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp6_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp6_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp5, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp5_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp5_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblHelp7_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp8, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp8_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp7, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp7_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp8_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp2_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp2_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp4_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp4_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addComponent(txaHelp4_1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(helpPanelLayout.createSequentialGroup()
                                    .addComponent(txaHelp3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblHelp3_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblHelp3_Title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(sepHelp8)
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHelp_Header)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepHelp1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp1_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHelp1_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txaHelp1))
                .addGap(18, 18, 18)
                .addComponent(sepHelp2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp2_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txaHelp2)
                    .addComponent(lblHelp2_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(sepHelp3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp3_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txaHelp3)
                    .addComponent(lblHelp3_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(sepHelp4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp4_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txaHelp4)
                    .addComponent(lblHelp4_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txaHelp4_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sepHelp5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp5_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHelp5_Image, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(txaHelp5))
                .addGap(18, 18, 18)
                .addComponent(sepHelp6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp6_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHelp6_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txaHelp6))
                .addGap(18, 18, 18)
                .addComponent(sepHelp7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp7_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHelp7_Image)
                    .addComponent(txaHelp7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sepHelp8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelp8_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHelp8_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txaHelp8, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        helpScroll.setViewportView(helpPanel);

        javax.swing.GroupLayout helpFrameLayout = new javax.swing.GroupLayout(helpFrame.getContentPane());
        helpFrame.getContentPane().setLayout(helpFrameLayout);
        helpFrameLayout.setHorizontalGroup(
            helpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(helpScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        helpFrameLayout.setVerticalGroup(
            helpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(helpScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About");
        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setIconImage(null);
        aboutDialog.setLocationByPlatform(true);
        aboutDialog.setMaximumSize(new java.awt.Dimension(250, 210));
        aboutDialog.setMinimumSize(new java.awt.Dimension(250, 210));
        aboutDialog.setResizable(false);

        aboutPanel.setMaximumSize(new java.awt.Dimension(250, 210));
        aboutPanel.setMinimumSize(new java.awt.Dimension(250, 210));
        aboutPanel.setName(""); // NOI18N
        aboutPanel.setPreferredSize(new java.awt.Dimension(250, 210));

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universal_dice_icon_128x.png"))); // NOI18N

        lblAbout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAbout.setText("Universal Dice v2.0");

        lblAuthor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAuthor.setText("Created by: ZoneSix");

        lblEmail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmail.setText("E-mail: areazone6@gmail.com");

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(lblAbout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAbout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAuthor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEmail)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addComponent(aboutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setMinimumSize(new java.awt.Dimension(592, 220));
        setPreferredSize(new java.awt.Dimension(592, 220));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRoll.setText("Roll");
        btnRoll.setToolTipText("Roll the dice");
        btnRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRollActionPerformed(evt);
            }
        });
        add(btnRoll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 23));

        btnReset.setText("Reset");
        btnReset.setToolTipText("Resets the application");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 80, 23));

        spinrDiceAmount.setToolTipText("Set the amout of dice you want to use");
        spinrDiceAmount.setName(""); // NOI18N
        spinrDiceAmount.setPreferredSize(new java.awt.Dimension(61, 23));
        spinrDiceAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinrDiceAmountStateChanged(evt);
            }
        });
        add(spinrDiceAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 40, 23));

        lblScoreText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScoreText.setText("Score:");
        lblScoreText.setToolTipText("Score of current roll");
        add(lblScoreText, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 50, 10));

        lblScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScore.setText("0");
        lblScore.setToolTipText("Score of current roll");
        add(lblScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 50, 20));

        lblTotalScoreText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalScoreText.setText("Total Score:");
        lblTotalScoreText.setToolTipText("The total score of all rolls");
        add(lblTotalScoreText, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 80, 10));

        lblTotalScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalScore.setText("0");
        lblTotalScore.setToolTipText("The total score of all rolls");
        add(lblTotalScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 80, 20));

        lblHistory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHistory.setText("History");
        lblHistory.setToolTipText("Roll number, Amount of dice used, Score for that roll");
        add(lblHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 110, -1));

        lblHistoryDesc.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblHistoryDesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHistoryDesc.setText("Roll | Dice | Score");
        lblHistoryDesc.setToolTipText("Roll number, Amount of dice used, Score for that roll");
        add(lblHistoryDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 112, -1));

        scrollHistory.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollHistory.setAutoscrolls(true);

        listHistory.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "1 0 |  3  |  18", "9  |  2  |  11", "8  |  2  |  10", "7  |  2  |  8", "6  |  2  |  12", "5  |  2  |  7", "4  |  1  |  5", "3  |  1  |  1", "2  |  1  |  4", "1  |  1  |  6" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listHistory.setToolTipText("Roll number, Amount of dice used, Score for that roll");
        scrollHistory.setViewportView(listHistory);

        add(scrollHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, 112, 130));

        btnDelete.setText("Delete Selected");
        btnDelete.setToolTipText("Delete's the selected entry");
        btnDelete.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnDelete.setPreferredSize(new java.awt.Dimension(100, 23));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 190, 112, -1));
        add(sepMainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 470, 10));

        cboxDice1.setText("Hold");
        cboxDice1.setToolTipText("Hold the score of Dice 1");
        add(cboxDice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        cboxDice2.setText("Hold");
        cboxDice2.setToolTipText("Hold the score of Dice 2");
        add(cboxDice2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, -1, -1));

        cboxDice3.setText("Hold");
        cboxDice3.setToolTipText("Hold the score of Dice 3");
        add(cboxDice3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, -1, -1));

        cboxDice4.setText("Hold");
        cboxDice4.setToolTipText("Hold the score of Dice 4");
        add(cboxDice4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, -1, -1));

        cboxDice5.setText("Hold");
        cboxDice5.setToolTipText("Hold the score of Dice 5");
        add(cboxDice5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
        // Declares integer 'response' and promts a dialog wiht 'yes' & 'no' buttons.
        int response = JOptionPane.showConfirmDialog(this, "Do you really want to reset?", "Reset", 0, 2);
        if ( response == 0 ) {      // Runs if user clicked 'yes' in the dialog.
            
            rollIndex = 0;  // Sets 'rollIndex' to 0.
            diceAmount = 1; // Sets 'diceAmount' to 1.
            
            spinrDiceAmount.setValue(diceAmount);   //Sets 'spinrDiceAmount's value to 'diceAmount'.
            updateDiceCount();      // Calls the 'updateDiceCount' method.
            
            rollIndexModel.clear(); // Clears the 'rollIndexModel' DefaultListModel.
            scoreModel.clear();     // Clears the 'scoreModel' DefaultListModel.
            historyModel.clear();   // Clears the 'historyModel' DefaultListModel.
            
            score = 0;      // Sets 'score' to 0.
            lblScore.setText( Integer.toString( score ) );  // Sets 'lblScore' to display the value of 'score'.
            updateTotalScore();                             // Calls the 'updateTotalScore' method.
            
            // Sets respective dice to a score of 6.
            dice1.setScore(6);
            dice2.setScore(6);
            dice3.setScore(6);
            dice4.setScore(6);
            dice5.setScore(6);
            
            repaint();  // Re-render the graphics
            
            // Unchecks each checkbox
            cboxDice1.setSelected(false);
            cboxDice2.setSelected(false);
            cboxDice3.setSelected(false);
            cboxDice4.setSelected(false);
            cboxDice5.setSelected(false);
            
            btnReset.setEnabled(false); // Sets 'btnReset' to disabled state
            
        }
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void spinrDiceAmountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinrDiceAmountStateChanged
        
        if ( (int) spinrDiceAmount.getValue() > 1 ) {   // Runs if 'spinrDiceAmount' is greater than 1.
            btnReset.setEnabled(true);                  // Sets 'btnReset' to enabled state.
        }
        
        diceAmount = (int) spinrDiceAmount.getValue();  // Sets 'diceAmount' to the value of 'spinrDiceAmount'.
        
        // This block limits diceAmount to have a minimum value of 1
        // and a maximum value of 5.
        if ( diceAmount > 5 ) {
            diceAmount = 5;
        } else if ( diceAmount < 1 ) {
            diceAmount = 1;
        }
        
        spinrDiceAmount.setValue(diceAmount);   // Sets spinrDiceAmount to the value of 'diceAmount'.
        
        updateDiceCount();  // Calls the 'updateDiceCount' method.
        repaint();          // Re-renders the graphics.
        
        /**
         * This block of if and else statements check is respective dice
         * is enabled or disabled and sets their checkboxes to the state of their dice
         */
        if ( dice1.isEnabled() ) {
            cboxDice1.setEnabled(true);
        } else {
            cboxDice1.setEnabled(false);
        }
        
        if ( dice2.isEnabled() ) {
            cboxDice2.setEnabled(true);
        } else {
            cboxDice2.setEnabled(false);
        }
        
        if ( dice3.isEnabled() ) {
            cboxDice3.setEnabled(true);
        } else {
            cboxDice3.setEnabled(false);
        }
        
        if ( dice4.isEnabled() ) {
            cboxDice4.setEnabled(true);
        } else {
            cboxDice4.setEnabled(false);
        }
        
        if ( dice5.isEnabled() ) {
            cboxDice5.setEnabled(true);
        } else {
            cboxDice5.setEnabled(false);
        }
        
    }//GEN-LAST:event_spinrDiceAmountStateChanged

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        if ( !listHistory.isSelectionEmpty() ) {    // Runs if an entry in listHistory is selected
            
            // Declares integer 'response' and promts a dialog with the buttons 'yes' & 'no'.
            int response = JOptionPane.showConfirmDialog(
                this, "Do you really want to delete roll " + rollIndexModel.get( listHistory.getSelectedIndex() ) + "?", "Delete Entry", 0, 2);
            
            if ( response == 0 ) {  // Runs if the user selected 'yes' in the dialog.
                
                // Removes the index of each DefaultListModel according to
                // the selected index of 'listHistory'.
                rollIndexModel.remove(listHistory.getSelectedIndex());
                scoreModel.remove(listHistory.getSelectedIndex());
                historyModel.remove(listHistory.getSelectedIndex());
                
                updateTotalScore(); // Calls the 'updateTotalScore' method.
                
            }
        } else if ( listHistory.getModel().getSize() < 1 ) {    // Runs else if the size of 'listHistory's model is less than 1.
            
            // Prompts a dialog window with an 'OK' buttom.
            JOptionPane.showMessageDialog(this, "There are no entries!", "Delete Entry", 0);
            
        } else {    // Runs else if none of the above statements were true.
            
            // Prompts a dialog window with an 'OK' buttom.
            JOptionPane.showMessageDialog(this, "There is nothing selected.", "Delete Entry", 1);
            
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRollActionPerformed
        
        btnReset.setEnabled(true);  // Sets 'btnReset's state to enabled.
        rollIndex++;                // Adds the value of 1 to 'rollIndex'.
        score = 0;                  // Sets 'score' to 0.
        
        /**
         * This block of if and else if statements checks
         * if respective dice is enabled and their check box is unchecked,
         * then randomizes respective dice and adds their score to 'score'.
         * Else if respective dice is enabled and their check box is checked,
         * then only add their score to 'score'.
         */
        if ( dice1.isEnabled() && !cboxDice1.isSelected() ) {
            dice1.roll();
            score += dice1.getScore();
        } else if ( dice1.isEnabled() && cboxDice1.isSelected() ) {
            score += dice1.getScore();
        }
        
        if ( dice2.isEnabled() && !cboxDice2.isSelected() ) {
            dice2.roll();
            score += dice2.getScore();
        } else if ( dice2.isEnabled() && cboxDice2.isSelected() ) {
            score += dice2.getScore();
        }
        
        if ( dice3.isEnabled() && !cboxDice3.isSelected() ) {
            dice3.roll();
            score += dice3.getScore();
        } else if ( dice3.isEnabled() && cboxDice3.isSelected() ) {
            score += dice3.getScore();
        }
        
        if ( dice4.isEnabled() && !cboxDice4.isSelected() ) {
            dice4.roll();
            score += dice4.getScore();
        } else if ( dice4.isEnabled() && cboxDice4.isSelected() ) {
            score += dice4.getScore();
        }
        
        if ( dice5.isEnabled() && !cboxDice5.isSelected() ) {
            dice5.roll();
            score += dice5.getScore();
        } else if ( dice5.isEnabled() && cboxDice5.isSelected() ) {
            score += dice5.getScore();
        }
        
        lblScore.setText( Integer.toString( score ) );  // Sets lblScore to display the value of 'score'.
        
        rollIndexModel.add(0, rollIndex);   // Adds the value of 'rollIndex' to index 0 of 'rollIndexModel'.
        scoreModel.add(0, score);           // Adds the value of 'score' to index 0 of 'scoreModel'.
        // Adds a new entry to the top of the list.
        historyModel.add(0, rollIndexModel.get(0)+"  |  "+diceAmount+"  |  "+scoreModel.get(0));
        listHistory.setSelectedIndex(0);    // Selects the top entry in 'listHistory'.
        scrollHistory.getViewport().setViewPosition(new Point(0,0));    // Scrolls to the top
        
        updateTotalScore(); // Calls the 'updateTotalScore' method.
        repaint();          // Re-renders the graphics.
        
    }//GEN-LAST:event_btnRollActionPerformed

    protected void paintComponent(Graphics g){
        
        super.paintComponent(g);
        
        // Fill black box if respective dice is enabled
        g.setColor( Color.black );
        
        if ( dice1.isEnabled() ) {
            g.fillRect( dicePosX + diceSpacing * 0, dicePosY, diceSize, diceSize);
        }
        
        if ( dice2.isEnabled() ) {
            g.fillRect( dicePosX + diceSpacing * 1, dicePosY, diceSize, diceSize);
        }
        
        if ( dice3.isEnabled() ) {
            g.fillRect( dicePosX + diceSpacing * 2, dicePosY, diceSize, diceSize);
        }
        
        if ( dice4.isEnabled() ) {
            g.fillRect( dicePosX + diceSpacing * 3, dicePosY, diceSize, diceSize);
        }
        
        if ( dice5.isEnabled() ) {
            g.fillRect( dicePosX + diceSpacing * 4, dicePosY, diceSize, diceSize);
        }
        
        g.setColor( Color.white );  // Set dots to white
        
        // Draw dots for dice1 if it's enabled.
        if ( dice1.isEnabled() ) {
            if ( dice1.getScore() == 1
                    || dice1.getScore() == 3
                    || dice1.getScore() == 5 ) {
                g.fillOval( calcX(0,2.5), calcY(2.5), diceDotSize, diceDotSize);
            }

            if ( dice1.getScore() == 2
                    || dice1.getScore() == 3
                    || dice1.getScore() == 4
                    || dice1.getScore() == 5
                    || dice1.getScore() == 6 ) {
                g.fillOval( calcX(0,1), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(0,4), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice1.getScore() == 4
                    || dice1.getScore() == 5
                    || dice1.getScore() == 6 ) {
                g.fillOval( calcX(0,4), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(0,1), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice1.getScore() == 6 ) {
                g.fillOval( calcX(0,1), calcY(2.5), diceDotSize, diceDotSize);
                g.fillOval( calcX(0,4), calcY(2.5), diceDotSize, diceDotSize);
            }
        }
        
        // Draw dots for dice2 if it's enabled.
        if ( dice2.isEnabled() ) {
            if ( dice2.getScore() == 1
                    || dice2.getScore() == 3
                    || dice2.getScore() == 5 ) {
                g.fillOval( calcX(1,2.5), calcY(2.5), diceDotSize, diceDotSize);
            }

            if ( dice2.getScore() == 2
                    || dice2.getScore() == 3
                    || dice2.getScore() == 4
                    || dice2.getScore() == 5
                    || dice2.getScore() == 6 ) {
                g.fillOval( calcX(1,1), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(1,4), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice2.getScore() == 4
                    || dice2.getScore() == 5
                    || dice2.getScore() == 6 ) {
                g.fillOval( calcX(1,4), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(1,1), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice2.getScore() == 6 ) {
                g.fillOval( calcX(1,1), calcY(2.5), diceDotSize, diceDotSize);
                g.fillOval( calcX(1,4), calcY(2.5), diceDotSize, diceDotSize);
            }
        }
        
        // Draw dots for dice3 if it's enabled.
        if ( dice3.isEnabled() ) {
            if ( dice3.getScore() == 1
                    || dice3.getScore() == 3
                    || dice3.getScore() == 5 ) {
                g.fillOval( calcX(2,2.5), calcY(2.5), diceDotSize, diceDotSize);
            }

            if ( dice3.getScore() == 2
                    || dice3.getScore() == 3
                    || dice3.getScore() == 4
                    || dice3.getScore() == 5
                    || dice3.getScore() == 6 ) {
                g.fillOval( calcX(2,1), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(2,4), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice3.getScore() == 4
                    || dice3.getScore() == 5
                    || dice3.getScore() == 6 ) {
                g.fillOval( calcX(2,4), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(2,1), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice3.getScore() == 6 ) {
                g.fillOval( calcX(2,1), calcY(2.5), diceDotSize, diceDotSize);
                g.fillOval( calcX(2,4), calcY(2.5), diceDotSize, diceDotSize);
            }
        }
        
        // Draw dots for dice4 if it's enabled.
        if ( dice4.isEnabled() ) {
            if ( dice4.getScore() == 1
                    || dice4.getScore() == 3
                    || dice4.getScore() == 5 ) {
                g.fillOval( calcX(3,2.5), calcY(2.5), diceDotSize, diceDotSize);
            }

            if ( dice4.getScore() == 2
                    || dice4.getScore() == 3
                    || dice4.getScore() == 4
                    || dice4.getScore() == 5
                    || dice4.getScore() == 6 ) {
                g.fillOval( calcX(3,1), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(3,4), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice4.getScore() == 4
                    || dice4.getScore() == 5
                    || dice4.getScore() == 6 ) {
                g.fillOval( calcX(3,4), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(3,1), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice4.getScore() == 6 ) {
                g.fillOval( calcX(3,1), calcY(2.5), diceDotSize, diceDotSize);
                g.fillOval( calcX(3,4), calcY(2.5), diceDotSize, diceDotSize);
            }
        }
        
        // Draw dots for dice5 if it's enabled.
        if ( dice5.isEnabled() ) {
            if ( dice5.getScore() == 1
                    || dice5.getScore() == 3
                    || dice5.getScore() == 5 ) {
                g.fillOval( calcX(4,2.5), calcY(2.5), diceDotSize, diceDotSize);
            }

            if ( dice5.getScore() == 2
                    || dice5.getScore() == 3
                    || dice5.getScore() == 4
                    || dice5.getScore() == 5
                    || dice5.getScore() == 6 ) {
                g.fillOval( calcX(4,1), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(4,4), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice5.getScore() == 4
                    || dice5.getScore() == 5
                    || dice5.getScore() == 6 ) {
                g.fillOval( calcX(4,4), calcY(1), diceDotSize, diceDotSize);
                g.fillOval( calcX(4,1), calcY(4), diceDotSize, diceDotSize);
            }

            if ( dice5.getScore() == 6 ) {
                g.fillOval( calcX(4,1), calcY(2.5), diceDotSize, diceDotSize);
                g.fillOval( calcX(4,4), calcY(2.5), diceDotSize, diceDotSize);
            }
        }
        
        // Draw black outline boxes for each dice
        g.setColor( Color.black );
        g.drawRect( dicePosX + diceSpacing * 0, dicePosY, diceSize, diceSize);
        g.drawRect( dicePosX + diceSpacing * 1, dicePosY, diceSize, diceSize);
        g.drawRect( dicePosX + diceSpacing * 2, dicePosY, diceSize, diceSize);
        g.drawRect( dicePosX + diceSpacing * 3, dicePosY, diceSize, diceSize);
        g.drawRect( dicePosX + diceSpacing * 4, dicePosY, diceSize, diceSize);
        
    }
    
    // Method to calculate X cordinate for the dots
    public int calcX( int index, double snapPos) {
        int dotX = (int) (( dicePosX + diceSpacing * index ) + ( diceSize * snapPos / 5 ) - diceDotSize / 2);
        return dotX;
    }
    
    // Method to calculate Y cordinate for the dots
    public int calcY( double snapPos) {
        int dotY = (int) (dicePosY + (diceSize * snapPos / 5) - diceDotSize / 2);
        return dotY;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JDialog aboutDialog;
    javax.swing.JPanel aboutPanel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRoll;
    private javax.swing.JCheckBox cboxDice1;
    private javax.swing.JCheckBox cboxDice2;
    private javax.swing.JCheckBox cboxDice3;
    private javax.swing.JCheckBox cboxDice4;
    private javax.swing.JCheckBox cboxDice5;
    javax.swing.JFrame helpFrame;
    javax.swing.JPanel helpPanel;
    javax.swing.JScrollPane helpScroll;
    private javax.swing.JLabel lblAbout;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHelp1_Image;
    private javax.swing.JLabel lblHelp1_Title;
    private javax.swing.JLabel lblHelp2_Image;
    private javax.swing.JLabel lblHelp2_Title;
    private javax.swing.JLabel lblHelp3_Image;
    private javax.swing.JLabel lblHelp3_Title;
    private javax.swing.JLabel lblHelp4_Image;
    private javax.swing.JLabel lblHelp4_Title;
    private javax.swing.JLabel lblHelp5_Image;
    private javax.swing.JLabel lblHelp5_Title;
    private javax.swing.JLabel lblHelp6_Image;
    private javax.swing.JLabel lblHelp6_Title;
    private javax.swing.JLabel lblHelp7_Image;
    private javax.swing.JLabel lblHelp7_Title;
    private javax.swing.JLabel lblHelp8_Image;
    private javax.swing.JLabel lblHelp8_Title;
    private javax.swing.JLabel lblHelp_Header;
    private javax.swing.JLabel lblHistory;
    private javax.swing.JLabel lblHistoryDesc;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreText;
    private javax.swing.JLabel lblTotalScore;
    private javax.swing.JLabel lblTotalScoreText;
    private javax.swing.JList listHistory;
    private javax.swing.JScrollPane scrollHistory;
    private javax.swing.JSeparator sepHelp1;
    private javax.swing.JSeparator sepHelp2;
    private javax.swing.JSeparator sepHelp3;
    private javax.swing.JSeparator sepHelp4;
    private javax.swing.JSeparator sepHelp5;
    private javax.swing.JSeparator sepHelp6;
    private javax.swing.JSeparator sepHelp7;
    private javax.swing.JSeparator sepHelp8;
    private javax.swing.JSeparator sepMainPanel;
    private javax.swing.JSpinner spinrDiceAmount;
    private javax.swing.JTextArea txaHelp1;
    private javax.swing.JTextArea txaHelp2;
    private javax.swing.JTextArea txaHelp3;
    private javax.swing.JTextArea txaHelp4;
    private javax.swing.JTextArea txaHelp4_1;
    private javax.swing.JTextArea txaHelp5;
    private javax.swing.JTextArea txaHelp6;
    private javax.swing.JTextArea txaHelp7;
    private javax.swing.JTextArea txaHelp8;
    // End of variables declaration//GEN-END:variables
}
